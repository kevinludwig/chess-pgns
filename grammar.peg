{
    function flatten(a, acc = []) {
        for (var i = 0; i < a.length; i++) {
            if (Array.isArray(a[i])) {
                flatten(a[i], acc);
            } else {
                acc.push(a[i]);
            }
        }
        return acc;
    }
    function make_header(hn,hv) {
        var m = {};
        m[hn] = hv;
        return m;
    }
    function make_game(h, m, r) {
        return {
            headers: h.reduce((x, acc) => Object.assign(acc, x), {}),
            moves: m,
            result: r
        };
    }
}
start = h:headers m:movetext r:result? {return make_game(h,m,r)}

double_quote = '"'
ws = ' ' / '\f' / '\t'
whitespace = ws / newline
newline = '\n'
header_name = chars:[A-Za-z0-9_-]+ {return chars.join('');}
header_value = chars:[A-Za-z0-9_-]+ {return chars.join('');}
header = '[' hn:header_name ws+ double_quote hv:header_value double_quote ']' newline { return make_header(hn,hv) }
headers = hs:header+ {return hs;}

piece = [NKQRB]
rank = [a-f]
file = [1-8]
check = "+"
capture = "x"
period = "."
result = "1-0" / "0-1" / "*" / "1/2-1/2"
move_number = first:[1-9] rest:[0-9]* period? {return parseInt(first + rest.join(''), 10);}
square = r:rank f:file {return r+f;}
comment_chars = [^}]
comment = "{" cc:comment_chars* "}" {return cc.join('');}
promotion = "=" [QRBN]
pawn_half_move = (r:rank c:capture)? square promotion? check?
piece_half_move = piece capture? square check?
castle_half_move = ("O-O" / "O-O-O") check?
half_move = m:(castle_half_move / piece_half_move / pawn_half_move) {return flatten(m).join('');}
move = c0:(c0:comment whitespace+ {return c0})? 
       mn:move_number? 
       c1:(whitespace+ c1:comment whitespace+ {return c1} / whitespace* {return ''}) 
       w:half_move 
       c2:(whitespace+ c2:comment {return c2})? 
       whitespace+ 
       b:half_move 
       c3:(whitespace+ c3:comment {return c3})? 
       {return {mn: mn, w: w, b: b, c0: c0 || '', c1: c1 || '', c2: c2 || '', c3: c3 || ''}}

movetext = moves:(move whitespace+)+ { return moves.map(m => m[0])}

