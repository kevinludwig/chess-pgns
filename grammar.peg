{
    function flatten(a, acc = []) {
        for (var i = 0; i < a.length; i++) {
            if (Array.isArray(a[i])) {
                flatten(a[i], acc);
            } else {
                acc.push(a[i]);
            }
        }
        return acc;
    }
    function make_header(hn,hv) {
        var m = {};
        m[hn] = hv;
        return m;
    }
    function make_game(h, c, m, r) {
        h = h || [];
        return {
            headers: h.reduce((x, acc) => Object.assign(acc, x), {}),
            comment: c,
            moves: m,
            result: r
        };
    }
}

start = gs:(game newline*)* {return gs.map(g => g[0])}

game = 
    h:headers? 
    c:comment? 
    whitespace* 
    m:movetext 
    r:result? {return make_game(h, c, m, r)}

double_quote = '"'
string = double_quote str:[^"]* double_quote {return str.join('')}
integer = a:[1-9] b:[0-9]* {return parseInt(a+b.join(''), 10)}
ws = ' ' / '\f' / '\t'
whitespace = ws / newline
newline = '\n'

header_name = chars:[A-Za-z0-9_-]+ {return chars.join('')}
header = '[' hn:header_name ws+ hv:string ']' whitespace* { return make_header(hn,hv) }
headers = hs:header+ {return hs}

piece = [NKQRB]
rank = [a-h]
file = [1-8]
check = "+"
checkmate = "#"
capture = "x"
period = "."
result = "1-0" / "0-1" / "*" / "1/2-1/2"
move_number = mn:integer period? {return mn}
square = r:rank f:file {return r+f}
promotion = "=" [QRBN]
nag = chars:("$" integer) {return chars.join('')}

comment_chars = [^}]
comment = "{" cc:comment_chars* "}" {return cc.join('');}

pawn_half_move = (r:rank c:capture)? square promotion?
piece_half_move = piece capture? square
piece_disambiguation_half_move = piece (rank / file) capture? square
castle_half_move = ("O-O-O" / "O-O") 

half_move = m:((castle_half_move / piece_disambiguation_half_move / piece_half_move / pawn_half_move) (check / checkmate)?) {return flatten(m).join('');}
move = mn:move_number? 
       whitespace*
       w:half_move 
       wn:(whitespace+ n:nag {return n})*
       c1:(whitespace+ c2:comment {return c2})? 
       whitespace+ 
       b:half_move 
       bn:(whitespace+ n:nag {return n})*
       c2:(whitespace+ c3:comment {return c3})? 
       {return {mn: mn, w: w, wn: wn, b: b, bn: bn, c1: c1 || '', c2: c2 || ''}}

last_move = mn:move_number?
    whitespace*
    w:half_move
    wn:(whitespace+ n:nag {return n})*
    c1:(whitespace+ c2:comment {return c2})? {return {mn: mn, w: w, wn: wn, c1: c1 || ''}}

movetext = moves:(move whitespace+)+ last:last_move? { 
    var result = moves.map(m => m[0]);
    return last ? result.concat(last) : result;
}

